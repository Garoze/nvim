"---------- [Lua] ----------"
snippet function "[Lua] defines a function." b
function ${1:functionName}(${2:...})
	$3
end
endsnippet

"---------- addEvent ----------"  
snippet addEvent "[Shared] register a custom event." b
addEvent($1)$2
endsnippet

snippet addEvent:s "[Shared] register a custom event." b
addEvent(${1:eventName}, true)
addEventHandler($1, ${2:getRootElement()}, ${3:functionName})$4
endsnippet

"---------- addEventHandler ----------"        
snippet addEventHandler "[Shared] add a event to a function." b
addEventHandler($1)
endsnippet

snippet addEventHandler:f "[Shared] add a event to a function." b
addEventHandler(${1:eventName}, ${2:getRootElement()}, ${3:functionName})$4
endsnippet

snippet addEventHandler:a "[Shared] add a event to a function." b
addEventHandler(${1:eventName}, ${2:getRootElement()}, function(${3:arguments})
	$4
end)$5
endsnippet

"---------- addCommandHandler ----------" 
snippet addCommandHandler "[Shared] add a command to a function." b
addCommandHandler($1)
endsnippet

snippet addCommandHandler:f "[Shared] add a command to a function." b
addCommandHandler(${1:command}, ${2:functionName})$3
endsnippet

snippet addCommandHandler:a "[Shared] add a command to a function." b
addCommandHandler(${1:command}, function(player, command, arg)
	$2
end)
endsnippet

"---------- setTimer ----------"
snippet setTimer "[Shared] executes a function after a timer." b
setTimer($1)
endsnippet

snippet setTimer:f "[Shared] executes a function after a timer." b
setTimer(function()
	$3	
end, ${1:timer}, ${2:count})
endsnippet

"---------- outputChatBox ----------"
snippet outputChatBox "[Shared] output an text on the ChatBox." b
outputChatBox($1)
endsnippet

snippet outputChatBox:s "[Shared] output a text on the ChatBox." b
outputChatBox(${1:text}, ${2:player}, 255, 255, 255, true)
endsnippet

snippet outputChatBox:c "[Shared] output a text on the ChatBox." b
outputChatBox(${1:text}, 255, 255, 255, true)
endsnippet

"---------- [MTA] Utils ----------"
snippet isPlayerInACL:s "[MTA] checks if a player are on an ACL group." b
if isPlayerInACL(${1:player}, ${2:ACLGroup}) then
	$3
end
endsnippet

snippet isPlayerInACL:z "[MTA] create a isPlayerInACL function." b
--> isPlayerInACL
function isPlayerInACL(player, acl)
	if isElement(player) and getElementType(player) == "player" and aclGetGroup(acl or "") and not isGuestAccount(getPlayerAccount(player)) then
		local account = getPlayerAccount(player)
		return isObjectInACLGroup( "user.".. getAccountName(account), aclGetGroup(acl))
	end
	return false 
end
endsnippet

snippet getElementDistance "[MTA] gets a element distance," b
--> getElementDistance
function getElementDistance(player, element)
	if isElement(player) and isElement(element) then 
		local px, py, pz = getElementPosition(player)
		local ex, ey, ez = getElementPosition(element)
		return getDistanceBetweenPoints3D(px, py, pz, ex, ey, ez)
	end 
	return false 
end 
endsnippet

"---------- onResourceStart ----------"
snippet onResourceStart "[Server] executes a function when a resource start." b
addEventHandler('onResourceStart', ${1:getRootElement()}, ${2:functionName})$3
endsnippet

"---------- createMarker ----------"
snippet createMarker "[Shared] create a marker element." b
createMarker(${1:vectorPosition}, ${2:markerType}, ${3:size}, ${4:color}, ${5:visibleElement})$6
endsnippet

snippet createMarker:v "[Shared] return a markerElement." 
local ${1:element} = createMarker($2)$3
endsnippet

"---------- onMarkerHit ----------"
snippet onMarkerHit "[Server] executes a function when a element hit a marker." b
addEventHandler('onMarkerHit', ${1:markerElement}, ${2:functionName})$3
endsnippet

"---------- getElementData ----------"
snippet getElementData "[Shared] retrives a data from a keyword." b
getElementData($1)$2
endsnippet

snippet getElementData:v "[Shared] retrives a data from a keyword." b
local ${1:var} = getElementData(${2:element}, ${3:keyword})
endsnippet

snippet getResourceRootElement "Description" b
addEventHandler(${1:Event}, getResourceRootElement(getThisResource()), ${2:functionName})
endsnippet

"---------- triggerEvent ----------"
snippet triggerServerEvent "[Client] trigger a registred event on ther server side." b
triggerServerEvent(${1:eventName}, ${2:sourceElement}, ${3:arguments})$4
endsnippet

snippet triggerClientEvent "[Server] trigger a registred event on the client side." b
triggerClientEvent(${1:elementSendTo}, ${2:eventName}, ${3:sourceElement}, ${4:arguments})$5
endsnippet


